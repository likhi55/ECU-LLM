name: Ensure SCR Issues from Registry (after registry workflow)

on:
  workflow_run:
    workflows: ["Update SCR Registry"]
    types: [completed]
  workflow_dispatch: {}

jobs:
  ensure-scr-issues:
    # run when 02 finished successfully, or via manual dispatch
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write

    steps:
      - name: Checkout latest branch tip (not head_sha)
        uses: actions/checkout@v4
        with:
          ref: refs/heads/${{ github.event_name == 'workflow_dispatch' && github.ref_name || github.event.workflow_run.head_branch }}
          fetch-depth: 0

      - name: Show registry (debug)
        run: |
          echo "---- scr/REGISTRY.csv ----"
          sed -n '1,200p' scr/REGISTRY.csv || true
          echo "--------------------------"

      - name: Create missing SCR issues from scr/REGISTRY.csv
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const fs = require('fs');

            const csvPath = 'scr/REGISTRY.csv';
            if (!fs.existsSync(csvPath)) { core.notice('No registry file'); return; }
            let content = fs.readFileSync(csvPath, 'utf8').replace(/\r\n/g, '\n').trim();
            if (!content) { core.notice('Empty registry'); return; }

            // rows: scr_id,title,path (title has commas removed by 02)
            const rows = content.split('\n').slice(1);

            // Get all SCR issues (open+closed)
            const existing = await github.paginate(
              github.rest.issues.listForRepo,
              { owner, repo, state: 'all', labels: 'SCR', per_page: 100 }
            );

            let created = 0, skipped = 0;
            for (const row of rows) {
              if (!row.trim()) continue;
              const [scrRaw, titleCsvRaw, mdPathRaw] = row.split(',');
              const scr = (scrRaw||'').trim();
              const titleCsv = (titleCsvRaw||'').trim();
              const mdPath = (mdPathRaw||'').trim();
              if (!/^SCR\d{6}$/.test(scr)) { core.info(`Skip malformed row: ${row}`); continue; }

              if (existing.some(i => (i.title||'').includes(scr))) { skipped++; continue; }

              // Prefer H1 in MD; fallback to CSV title; commas already stripped in 02
              let title = titleCsv && titleCsv !== '(no title)' ? titleCsv : 'Change Request';
              try {
                const md = fs.readFileSync(mdPath, 'utf8');
                const m = md.match(/^#\s*(.+)$/m);
                if (m) title = m[1].replace(/,/g, '');
              } catch (_) {}

              await github.rest.issues.create({
                owner, repo,
                title: `${scr}: ${title}`,
                body: `Auto-created from \`${mdPath}\` after **scr/REGISTRY.csv** update.`,
                labels: ['SCR', 'state: open']
              });
              created++;
            }
            core.notice(`Created ${created} issue(s), skipped ${skipped}.`);
